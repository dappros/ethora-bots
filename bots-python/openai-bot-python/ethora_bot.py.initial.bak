# ethora_bot.py
import asyncio
import slixmpp
import openai
from typing import Optional, List
import os
from dotenv import load_dotenv
import logging
import ssl
import datetime
import xml.etree.ElementTree as ET

class EthoraChatBot(slixmpp.ClientXMPP):
    def __init__(self, jid: str, password: str, room_jid: str, openai_key: str, bot_name: str = None, verbose: bool = False):
        super().__init__(jid, password)
        
        # Logging setup first
        logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO,
                          format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)
        
        # Bot configuration
        self.room_jid = room_jid
        self.bot_name = bot_name or "AI Assistant Python"
        self.message_history: List[dict] = [
            {"role": "system", "content": "You are a helpful AI assistant in a group chat. Keep responses concise and friendly."}
        ]
        
        # Configure WebSocket settings
        self.use_websockets = True
        self.default_port = 5443
        self.default_domain = 'xmpp.ethoradev.com'
        self.websocket_url = f"wss://{self.default_domain}:{self.default_port}/ws"
        
        # Set up SSL context
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE
        
        # Override the default connection method
        self.configure_socket = self.configure_websocket
        
        # Register XMPP plugins
        self.register_plugin('xep_0045')  # Multi-User Chat
        self.register_plugin('xep_0199')  # XMPP Ping
        self.register_plugin('xep_0085')  # Chat State Notifications
        
        # OpenAI setup
        self.client = openai.OpenAI(api_key=openai_key)
        
        # Add event handlers
        self._setup_handlers()

    def _setup_handlers(self):
        """Set up all event handlers"""
        # Connection handlers
        self.add_event_handler("connecting", self.on_connecting)
        self.add_event_handler("connected", self.on_connected)
        self.add_event_handler("disconnected", self.on_disconnected)
        self.add_event_handler("failed_auth", self.on_failed_auth)
        self.add_event_handler("socket_error", self.on_socket_error)
        
        # Session and message handlers
        self.add_event_handler("session_start", self.start)
        self.add_event_handler("groupchat_message", self.muc_message)
        self.add_event_handler("muc::%s::presence" % self.room_jid, self.muc_presence)
        
        # Stream handlers
        self.add_event_handler("stream_negotiated", self.on_stream_negotiated)
        self.add_event_handler("stream_error", self.on_stream_error)

    def on_connecting(self, event):
        self.logger.info("Connecting to server...")

    def on_connected(self, event):
        self.logger.info("Connected to server!")

    def on_disconnected(self, event):
        self.logger.warning("Disconnected from server!")

    def on_failed_auth(self, event):
        self.logger.error("Failed authentication!")

    def on_socket_error(self, error):
        self.logger.error(f"Socket error: {error}")

    def on_stream_negotiated(self, event):
        """Called when stream is negotiated"""
        self.logger.info("Stream negotiated!")
        try:
            # Send initial presence
            presence = self.Presence()
            presence['to'] = f"{self.room_jid}/{self.boundjid.local}"
            
            # Add MUC namespace
            x = ET.Element('{http://jabber.org/protocol/muc}x')
            presence.xml.append(x)
            
            # Add data element
            data = ET.Element('data')
            data.set('xmlns', 'jabber:client')
            data.set('fullName', self.bot_name)
            data.set('senderFirstName', self.bot_name)
            data.set('senderLastName', 'AI')
            data.set('showInChannel', 'true')
            presence.xml.append(data)
            
            self.send(presence)
            self.logger.info(f"Joined room: {self.room_jid}")
            
            # Send welcome message
            self.send_message(
                mto=self.room_jid,
                mbody=f"ðŸ‘‹ Hello! I'm {self.bot_name}, ready to help!",
                mtype='groupchat'
            )
        except Exception as e:
            self.logger.error(f"Error in stream negotiation: {e}", exc_info=True)

    def muc_presence(self, presence):
        """Handle MUC presence stanzas"""
        self.logger.info(f"MUC Presence: {presence['from']} - type: {presence['type']}")

    async def start(self, event):
        """Process the session_start event."""
        try:
            self.logger.info("Session started, sending initial presence...")
            await self.get_roster()
            self.send_presence()
            
            # Join the MUC room
            await self.plugin['xep_0045'].join_muc(
                self.room_jid,
                self.boundjid.local
            )
        except Exception as e:
            self.logger.error(f"Error in session start: {e}", exc_info=True)

    async def muc_message(self, msg):
        """Handle incoming MUC messages"""
        if msg['mucnick'] != self.boundjid.local and msg['body']:
            try:
                self.logger.info(f"Processing message from {msg['mucnick']}: {msg['body']}")
                
                # Update message history
                self.message_history.append({
                    "role": "user",
                    "content": msg['body']
                })
                
                # Keep history limited to last 10 messages
                if len(self.message_history) > 11:
                    self.message_history = [
                        self.message_history[0],  # Keep system message
                        *self.message_history[-10:]  # Keep last 10 messages
                    ]
                
                response = await self._get_ai_response()
                if response:
                    # Add response to history
                    self.message_history.append({
                        "role": "assistant",
                        "content": response
                    })
                    
                    # Create message stanza
                    message = self.Message()
                    message['to'] = self.room_jid
                    message['type'] = 'groupchat'
                    message['body'] = response
                    
                    # Add data element
                    data = ET.Element('data')
                    data.set('xmlns', 'jabber:client')
                    data.set('fullName', self.bot_name)
                    data.set('senderFirstName', self.bot_name)
                    data.set('senderLastName', 'AI')
                    data.set('showInChannel', 'true')
                    message.xml.append(data)
                    
                    self.send(message)
                    self.logger.info(f"Sent response: {response[:50]}...")
            except Exception as e:
                self.logger.error(f"Error processing message: {e}", exc_info=True)

    async def _get_ai_response(self) -> Optional[str]:
        """Get response from OpenAI"""
        try:
            completion = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=self.message_history,
                temperature=0.7,
                max_tokens=150
            )
            return completion.choices[0].message.content
        except Exception as e:
            self.logger.error(f"OpenAI API error: {e}")
            return "Sorry, I encountered an error processing your message."

    def configure_websocket(self, socket_tuple):
        """Configure the connection as WebSocket"""
        try:
            import websockets
            return websockets.connect(
                self.websocket_url,
                ssl=self.ssl_context,
                subprotocols=['xmpp']
            )
        except ImportError:
            self.logger.error("websockets library not found. Please install it with: pip install websockets")
            raise

def main():
    load_dotenv()
    
    # Get configuration from environment
    bot_jid = os.getenv("BOT_JID")
    bot_password = os.getenv("BOT_PASSWORD")
    room_jid = os.getenv("ROOM_JID")
    openai_key = os.getenv("OPENAI_API_KEY")
    bot_name = os.getenv("BOT_NAME", "AI Assistant Python")
    
    # Validate required environment variables
    required_vars = {
        "BOT_JID": bot_jid,
        "BOT_PASSWORD": bot_password,
        "ROOM_JID": room_jid,
        "OPENAI_API_KEY": openai_key
    }
    
    missing_vars = [var for var, value in required_vars.items() if not value]
    if missing_vars:
        raise ValueError(f"Missing required environment variables: {', '.join(missing_vars)}")
    
    logging.info(f"Initializing bot with JID: {bot_jid}")
    logging.info(f"Target room: {room_jid}")
    
    try:
        bot = EthoraChatBot(
            jid=bot_jid,
            password=bot_password,
            room_jid=room_jid,
            openai_key=openai_key,
            bot_name=bot_name,
            verbose=True
        )
        
        bot.connect()
        bot.process(forever=True)
    except Exception as e:
        logging.error(f"Bot error: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    main()
