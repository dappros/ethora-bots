# ethora_bot.py
import asyncio
import aioxmpp
import openai
from typing import Optional, List
import os
from dotenv import load_dotenv
import logging
import ssl
import datetime
import xml.etree.ElementTree as ET
from urllib.parse import urlparse

class EthoraChatBot:
    def __init__(self, jid: str, password: str, room_jid: str, openai_key: str, bot_name: str = None, verbose: bool = False):
        # Logging setup first
        logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO,
                          format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)
        
        # Bot configuration
        self.jid = aioxmpp.JID.fromstr(jid)
        self.password = password
        self.room_jid = aioxmpp.JID.fromstr(room_jid)
        self.bot_name = bot_name or "AI Assistant Python"
        self.message_history: List[dict] = [
            {"role": "system", "content": "You are a helpful AI assistant in a group chat. Keep responses concise and friendly."}
        ]
        
        # Configure connection settings
        self.websocket_url = os.getenv('XMPP_ENDPOINT', 'wss://xmpp.ethoradev.com:5443/ws')
        self.logger.info(f"Using WebSocket endpoint: {self.websocket_url}")
        
        # Parse the WebSocket URL
        parsed_url = urlparse(self.websocket_url)
        self.host = parsed_url.hostname
        self.port = parsed_url.port or 5443
        self.path = parsed_url.path or '/ws'
        self.logger.info(f"Parsed connection details - Host: {self.host}, Port: {self.port}, Path: {self.path}")
        
        # Set up SSL context
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE
        
        # OpenAI setup
        self.client = openai.OpenAI(api_key=openai_key)
        
        # Create XMPP client
        self.xmpp = aioxmpp.PresenceManagedClient(
            self.jid,
            aioxmpp.make_security_layer(password),
            override_peer=[(self.host, self.port, True)]
        )
        
        # Set up MUC service
        self.muc = self.xmpp.summon(aioxmpp.MUCClient)
        
        # Set up handlers
        self.xmpp.on_stream_established.connect(self._on_stream_established)
        self.xmpp.on_failure.connect(self._on_failure)
        
    async def _on_stream_established(self):
        """Handle stream establishment"""
        self.logger.info("Stream established!")
        try:
            # Join the MUC room
            room, fut = self.muc.join(
                self.room_jid,
                self.jid.localpart
            )
            await fut
            self.logger.info(f"Joined room: {self.room_jid}")
            
            # Set up room message handler
            room.on_message.connect(self._on_muc_message)
            
            # Send welcome message
            await self._send_welcome_message(room)
        except Exception as e:
            self.logger.error(f"Error in stream establishment: {e}", exc_info=True)
    
    def _on_failure(self, exc):
        """Handle connection failures"""
        self.logger.error(f"Connection failed: {exc}", exc_info=True)
    
    async def _on_muc_message(self, message, member, source, **kwargs):
        """Handle MUC messages"""
        if member is not None and member.nick != self.jid.localpart and message.body:
            try:
                self.logger.info(f"Processing message from {member.nick}: {message.body}")
                
                # Update message history
                self.message_history.append({
                    "role": "user",
                    "content": message.body.any()
                })
                
                # Keep history limited to last 10 messages
                if len(self.message_history) > 11:
                    self.message_history = [
                        self.message_history[0],  # Keep system message
                        *self.message_history[-10:]  # Keep last 10 messages
                    ]
                
                response = await self._get_ai_response()
                if response:
                    # Add response to history
                    self.message_history.append({
                        "role": "assistant",
                        "content": response
                    })
                    
                    # Send response
                    msg = aioxmpp.Message(
                        type_=aioxmpp.MessageType.GROUPCHAT,
                        to=self.room_jid
                    )
                    msg.body[None] = response
                    await self.xmpp.send(msg)
                    self.logger.info(f"Sent response: {response[:50]}...")
            except Exception as e:
                self.logger.error(f"Error processing message: {e}", exc_info=True)
    
    async def _send_welcome_message(self, room):
        """Send welcome message to the room"""
        try:
            welcome_msg = f"ðŸ‘‹ Hello! I'm {self.bot_name}, an AI assistant powered by OpenAI. I'm here to help answer your questions and participate in discussions. Feel free to chat with me!"
            msg = aioxmpp.Message(
                type_=aioxmpp.MessageType.GROUPCHAT,
                to=self.room_jid
            )
            msg.body[None] = welcome_msg
            await self.xmpp.send(msg)
            self.logger.info("Sent welcome message")
        except Exception as e:
            self.logger.error(f"Error sending welcome message: {e}", exc_info=True)
    
    async def _get_ai_response(self) -> Optional[str]:
        """Get response from OpenAI"""
        try:
            completion = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=self.message_history,
                temperature=0.7,
                max_tokens=150
            )
            return completion.choices[0].message.content
        except Exception as e:
            self.logger.error(f"OpenAI API error: {e}")
            return "Sorry, I encountered an error processing your message."
    
    async def start(self):
        """Start the bot"""
        try:
            self.logger.info("Starting bot...")
            await self.xmpp.start()
            self.logger.info("Bot started successfully")
        except Exception as e:
            self.logger.error(f"Error starting bot: {e}", exc_info=True)
            raise

async def main():
    load_dotenv()
    
    # Get configuration from environment
    bot_jid = os.getenv("BOT_JID")
    bot_password = os.getenv("BOT_PASSWORD")
    room_jid = os.getenv("ROOM_JID")
    openai_key = os.getenv("OPENAI_API_KEY")
    bot_name = os.getenv("BOT_NAME", "AI Assistant Python")
    
    # Validate required environment variables
    required_vars = {
        "BOT_JID": bot_jid,
        "BOT_PASSWORD": bot_password,
        "ROOM_JID": room_jid,
        "OPENAI_API_KEY": openai_key
    }
    
    missing_vars = [var for var, value in required_vars.items() if not value]
    if missing_vars:
        raise ValueError(f"Missing required environment variables: {', '.join(missing_vars)}")
    
    logging.info(f"Initializing bot with JID: {bot_jid}")
    logging.info(f"Target room: {room_jid}")
    
    try:
        bot = EthoraChatBot(
            jid=bot_jid,
            password=bot_password,
            room_jid=room_jid,
            openai_key=openai_key,
            bot_name=bot_name,
            verbose=True
        )
        
        await bot.start()
        
        # Keep the bot running
        while True:
            await asyncio.sleep(1)
    except Exception as e:
        logging.error(f"Bot error: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    asyncio.run(main())
